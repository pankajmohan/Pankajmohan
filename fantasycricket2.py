# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'fantasycricket2.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sqlite3
from PyQt5 import QtCore, QtGui, QtWidgets
from open import Ui_Dialog
from Eval import Ui_DialogEval

fcdb = sqlite3.connect('fantasycricket.db')
cursorfc = fcdb.cursor()


class Ui_MainWindow(QtWidgets.QWidget):
    def setupUi(self, MainWindow):
        self.state = 'OFF'

        MainWindow.setObjectName("MainWindo")
        MainWindow.resize(700, 600)
        MainWindow.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                                 "border-top-color: rgb(181, 181, 181);")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.horizontalLayoutPlayers = QtWidgets.QHBoxLayout()
        self.horizontalLayoutPlayers.setObjectName("horizontalLayoutPlayers")
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayoutPlayers.addItem(spacerItem)
        self.framePlayers = QtWidgets.QFrame(self.centralwidget)
        self.framePlayers.setFrameShape(QtWidgets.QFrame.Box)
        self.framePlayers.setFrameShadow(QtWidgets.QFrame.Plain)
        self.framePlayers.setObjectName("framePlayers")
        self.gridLayout = QtWidgets.QGridLayout(self.framePlayers)
        self.gridLayout.setObjectName("gridLayout")
        self.rbBat = QtWidgets.QRadioButton(self.framePlayers)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(8)
        self.rbBat.setFont(font)
        self.rbBat.setObjectName("rbBat")
        self.gridLayout.addWidget(self.rbBat, 0, 0, 1, 1)
        self.rbBat.toggled.connect(self.getplayer)

        self.rbWk = QtWidgets.QRadioButton(self.framePlayers)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        self.rbWk.setFont(font)
        self.rbWk.setObjectName("rbWk")
        self.gridLayout.addWidget(self.rbWk, 0, 1, 1, 1)
        self.rbWk.toggled.connect(self.getplayer)

        self.rbBow = QtWidgets.QRadioButton(self.framePlayers)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        self.rbBow.setFont(font)
        self.rbBow.setObjectName("rbBow")
        self.gridLayout.addWidget(self.rbBow, 0, 2, 1, 1)
        self.rbBow.toggled.connect(self.getplayer)

        self.rbAr = QtWidgets.QRadioButton(self.framePlayers)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        self.rbAr.setFont(font)
        self.rbAr.setObjectName("rbAr")
        self.gridLayout.addWidget(self.rbAr, 0, 3, 1, 1)
        self.rbAr.toggled.connect(self.getplayer)

        self.listplayers = QtWidgets.QListWidget(self.framePlayers)
        self.listplayers.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.listplayers.setObjectName("listplayers")
        self.listplayers.itemDoubleClicked.connect(self.removelist1)
        self.gridLayout.addWidget(self.listplayers, 1, 0, 1, 4)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        self.listplayers.setStyleSheet("color: blue;")
        font.setPointSize(10)
        self.listplayers.setFont(font)
        self.horizontalLayoutPlayers.addWidget(self.framePlayers)
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayoutPlayers.addItem(spacerItem1)
        self.labelArrow = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.labelArrow.setFont(font)
        self.labelArrow.setAlignment(QtCore.Qt.AlignCenter)
        self.labelArrow.setObjectName("labelArrow")
        self.horizontalLayoutPlayers.addWidget(self.labelArrow)
        spacerItem2 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayoutPlayers.addItem(spacerItem2)
        self.framePlayerschosen = QtWidgets.QFrame(self.centralwidget)
        self.framePlayerschosen.setFrameShape(QtWidgets.QFrame.Box)
        self.framePlayerschosen.setFrameShadow(QtWidgets.QFrame.Plain)
        self.framePlayerschosen.setObjectName("framePlayerschosen")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.framePlayerschosen)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.labelTname = QtWidgets.QLabel(self.framePlayerschosen)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.labelTname.setFont(font)
        self.labelTname.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.labelTname.setObjectName("labelTname")
        self.gridLayout_2.addWidget(self.labelTname, 0, 0, 1, 1)
        self.teamName = QtWidgets.QLabel(self.framePlayerschosen)

        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.teamName.setFont(font)
        self.teamName.setStyleSheet("color: rgb(51, 236, 255);")
        self.teamName.setObjectName("teamName")
        self.gridLayout_2.addWidget(self.teamName, 0, 1, 1, 1)
        self.listPlayerschosen = QtWidgets.QListWidget(self.framePlayerschosen)
        self.listPlayerschosen.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.listPlayerschosen.setObjectName("listPlayerschosen")
        self.listPlayerschosen.setStyleSheet("color: blue")
        self.gridLayout_2.addWidget(self.listPlayerschosen, 1, 0, 1, 2)
        self.horizontalLayoutPlayers.addWidget(self.framePlayerschosen)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(10)
        self.listPlayerschosen.setFont(font)
        self.listPlayerschosen.itemDoubleClicked.connect(self.removelist2)
        spacerItem3 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayoutPlayers.addItem(spacerItem3)
        self.gridLayout_3.addLayout(self.horizontalLayoutPlayers, 2, 0, 1, 1)
        self.horizontalLayoutPoints = QtWidgets.QHBoxLayout()
        self.horizontalLayoutPoints.setObjectName("horizontalLayoutPoints")
        self.labelPavail = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.labelPavail.setFont(font)
        self.labelPavail.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.labelPavail.setObjectName("labelPavail")
        self.horizontalLayoutPoints.addWidget(self.labelPavail)
        self.pointsAvail = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.pointsAvail.setFont(font)
        self.pointsAvail.setStyleSheet("color: rgb(51, 236, 255);")
        self.pointsAvail.setObjectName("pointsAvail")
        self.horizontalLayoutPoints.addWidget(self.pointsAvail)
        self.labelPused = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.labelPused.setFont(font)
        self.labelPused.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.labelPused.setObjectName("labelPused")
        self.horizontalLayoutPoints.addWidget(self.labelPused)
        self.pointsUsed = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.pointsUsed.setFont(font)
        self.pointsUsed.setStyleSheet("color: rgb(51, 236, 255);")
        self.pointsUsed.setObjectName("pointsUsed")
        self.horizontalLayoutPoints.addWidget(self.pointsUsed)
        self.gridLayout_3.addLayout(self.horizontalLayoutPoints, 1, 0, 1, 1)
        self.frameScore = QtWidgets.QFrame(self.centralwidget)
        self.frameScore.setStyleSheet("background-color: rgb(216, 216, 216);\n"
                                      "border-color: rgb(216, 216, 216);")
        self.frameScore.setFrameShape(QtWidgets.QFrame.Box)
        self.frameScore.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frameScore.setObjectName("frameScore")
        self.gridLayout_4 = QtWidgets.QGridLayout(self.frameScore)
        self.gridLayout_4.setObjectName("gridLayout_4")
        self.labelYourSelections = QtWidgets.QLabel(self.frameScore)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(10)
        self.labelYourSelections.setFont(font)
        self.labelYourSelections.setObjectName("labelYourSelections")
        self.gridLayout_4.addWidget(self.labelYourSelections, 0, 0, 1, 1)
        self.horizontalLayoutScore = QtWidgets.QHBoxLayout()
        self.horizontalLayoutScore.setObjectName("horizontalLayoutScore")
        self.labelBat = QtWidgets.QLabel(self.frameScore)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.labelBat.setFont(font)
        self.labelBat.setObjectName("labelBat")
        self.horizontalLayoutScore.addWidget(self.labelBat)
        self.batScore = QtWidgets.QLabel(self.frameScore)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.batScore.setFont(font)
        self.batScore.setStyleSheet("color: rgb(51, 236, 255);")
        self.batScore.setObjectName("batScore")
        self.horizontalLayoutScore.addWidget(self.batScore)
        self.labelBowl = QtWidgets.QLabel(self.frameScore)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.labelBowl.setFont(font)
        self.labelBowl.setObjectName("labelBowl")
        self.horizontalLayoutScore.addWidget(self.labelBowl)
        self.bowlScore = QtWidgets.QLabel(self.frameScore)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.bowlScore.setFont(font)
        self.bowlScore.setStyleSheet("color: rgb(51, 236, 255);")
        self.bowlScore.setObjectName("bowlScore")
        self.horizontalLayoutScore.addWidget(self.bowlScore)
        self.labelAr = QtWidgets.QLabel(self.frameScore)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.labelAr.setFont(font)
        self.labelAr.setObjectName("labelAr")
        self.horizontalLayoutScore.addWidget(self.labelAr)
        self.arScore = QtWidgets.QLabel(self.frameScore)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.arScore.setFont(font)
        self.arScore.setStyleSheet("color: rgb(51, 236, 255);")
        self.arScore.setObjectName("arScore()")
        self.horizontalLayoutScore.addWidget(self.arScore)
        self.labelWk = QtWidgets.QLabel(self.frameScore)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.labelWk.setFont(font)
        self.labelWk.setObjectName("labelWk")
        self.horizontalLayoutScore.addWidget(self.labelWk)
        self.wkScore = QtWidgets.QLabel(self.frameScore)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.wkScore.setFont(font)
        self.wkScore.setStyleSheet("color: rgb(51, 236, 255);")
        self.wkScore.setObjectName("wkScore")
        self.horizontalLayoutScore.addWidget(self.wkScore)
        self.gridLayout_4.addLayout(self.horizontalLayoutScore, 1, 0, 1, 1)
        self.gridLayout_3.addWidget(self.frameScore, 0, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 691, 22))
        self.menubar.setObjectName("menubar")
        self.menuManage_Teams = QtWidgets.QMenu(self.menubar)
        self.menuManage_Teams.setObjectName("menuManage_Teams")

        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionNewteam = QtWidgets.QAction(MainWindow)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(9)
        self.actionNewteam.setFont(font)
        self.actionNewteam.setObjectName("actionNewteam")
        self.actionNewteam.triggered.connect(self.takevalues)
        self.actionOpenteam = QtWidgets.QAction(MainWindow)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(9)
        self.actionOpenteam.setFont(font)
        self.actionOpenteam.setObjectName("actionOpenteam")
        self.actionOpenteam.triggered.connect(self.openTeam)
        self.actionSaveteam = QtWidgets.QAction(MainWindow)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(9)
        self.actionSaveteam.setFont(font)
        self.actionSaveteam.setObjectName("actionSaveteam")
        self.actionSaveteam.triggered.connect(self.saveteam)
        self.actionEvaluateteam = QtWidgets.QAction(MainWindow)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(9)
        self.actionEvaluateteam.setFont(font)
        self.actionEvaluateteam.setObjectName("actionEvaluateteam")
        self.actionEvaluateteam.triggered.connect(self.evaluateTeam)
        self.menuManage_Teams.addAction(self.actionNewteam)
        self.menuManage_Teams.addAction(self.actionOpenteam)
        self.menuManage_Teams.addAction(self.actionSaveteam)
        self.menuManage_Teams.addAction(self.actionEvaluateteam)
        self.menubar.addAction(self.menuManage_Teams.menuAction())
        self.menuManage_Teams.setStyleSheet("background-color: grey;\n"
                                            "border-top-color: rgb(181, 181, 181);")

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Fantasy Cricket"))
        MainWindow.setWindowTitle(_translate("MainWindow", "Fantasy Cricket"))
        self.rbBat.setText(_translate("MainWindow", "BAT"))
        self.rbWk.setText(_translate("MainWindow", "WK"))
        self.rbBow.setText(_translate("MainWindow", "BOW"))
        self.rbAr.setText(_translate("MainWindow", "AR"))
        self.labelArrow.setText(_translate("MainWindow", ">"))
        self.labelTname.setText(_translate("MainWindow", "Team Name"))
        self.teamName.setText(_translate("MainWindow", ""))
        self.labelPavail.setText(_translate("MainWindow", "Points Available"))
        self.pointsAvail.setText(_translate("MainWindow", "####"))
        self.labelPused.setText(_translate("MainWindow", "Points Used"))
        self.pointsUsed.setText(_translate("MainWindow", "####"))
        self.labelYourSelections.setText(_translate("MainWindow", "Yours Selections"))
        self.labelBat.setText(_translate("MainWindow", "Batsmen(BAT)"))
        self.batScore.setText(_translate("MainWindow", "##"))
        self.labelBowl.setText(_translate("MainWindow", "Bowlers(BOW)"))
        self.bowlScore.setText(_translate("MainWindow", "##"))
        self.labelAr.setText(_translate("MainWindow", "Allrounders(AR)"))
        self.arScore.setText(_translate("MainWindow", "##"))
        self.labelWk.setText(_translate("MainWindow", "Wicket-keeper(WK)"))
        self.wkScore.setText(_translate("MainWindow", "##"))
        self.menuManage_Teams.setTitle(_translate("MainWindow", "Manage Teams"))
        self.actionNewteam.setText(_translate("MainWindow", "NEW Team"))
        self.actionOpenteam.setText(_translate("MainWindow", "OPEN Team"))
        self.actionSaveteam.setText(_translate("MainWindow", "SAVE Team"))
        self.actionEvaluateteam.setText(_translate("MainWindow", "EVALAUTE Team"))
        self.state = 'OFF'

    def openTeam(self):

        Dialog = QtWidgets.QDialog()
        ui = Ui_Dialog()
        ui.setupUi(Dialog)
        Dialog.show()
        Dialog.exec_()

    def evaluateTeam(self):
        Dialog = QtWidgets.QDialog()
        ui = Ui_DialogEval()
        ui.setupUi(Dialog)
        Dialog.show()
        Dialog.exec_()

    def saveteam(self):
        # making an empty list
        listMain = []
        # to not let user to add less than 11 players
        if (self.listPlayerschosen.count()) == 11:
            for p in range(self.listPlayerschosen.count()):
                pname = self.listPlayerschosen.item(p).text()

                cursorfc.execute("SELECT value FROM stats WHERE player='" + pname + "';")

                tname = self.teamName.text()

                playervalue = (''.join(map(str, cursorfc.fetchone())))

                listInsert = (tname, pname, playervalue)
                # adding list to the main list
                listMain.append(listInsert)
            cursorfc.executemany("INSERT INTO teams VALUES( ?, ?, ?);", listMain)
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Information)
            msg.setText("Team Saved!")
            msg.setWindowTitle("Done")
            msg.setStandardButtons(QtWidgets.QMessageBox.Ok)
            msg.exec_()

            fcdb.commit()
            fcdb.close()
            self.state = 'OFF'

            self.listplayers.clear()
            self.listPlayerschosen.clear()
            self.retranslateUi(self)

        else:
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Critical)
            msg.setText(
                " Total Players Selected = {} \n A Cricket Team has 11 Players".format(self.listPlayerschosen.count()))
            msg.setWindowTitle("Error!")
            msg.setStandardButtons(QtWidgets.QMessageBox.Ok)
            msg.exec_()

    # this function is to call addplayer function  so that user can click  radiobuttons and can see
    # the names of players in left side list
    def getplayer(self):
        if self.state == 'ON':
            if self.rbBat.isChecked() == True: self.addplayer('BAT')  # for Batsmen
            if self.rbBow.isChecked() == True: self.addplayer('BWL')  # for bowlers
            if self.rbAr.isChecked() == True: self.addplayer('AR')  # for allrounders
            if self.rbWk.isChecked() == True: self.addplayer('WK')  # for wicketkeepers

    def addplayer(self, category):
        listofplayers = []
        # empty list isto take value from 2nd list so that we can check and dont let items to duplicate
        playersalready = []

        for p in range(self.listPlayerschosen.count()):
            playersalready.append(self.listPlayerschosen.item(p).text())

        playerctg = category
        # getting names of players from database
        cursorfc.execute(
            "SELECT player FROM stats WHERE ctg='" + playerctg + "';")
        k = cursorfc.fetchall()
        # converting list of tuples to list
        records = [item for t in k for item in t]

        for record in records:
            if record in playersalready:
                continue
            else:
                # adding players which are not in team selected by user sofar
                listofplayers.append(record)
        self.listplayers.clear()
        for row in listofplayers:
            self.listplayers.addItem(row)
        self.listplayers.update()

    def takevalues(self):
        # taking values from database and removing all the duplicates using distinct
        cursorfc.execute("SELECT DISTINCT team from teams; ")
        tup = cursorfc.fetchall()
        records = [item for t in tup for item in t]

        text, ok = QtWidgets.QInputDialog.getText(self, 'Team Name', 'Enter text:')

        while not text.strip():
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Critical)
            msg.setText(" Please Enter a name")
            msg.setWindowTitle("Error!")
            msg.setStandardButtons(QtWidgets.QMessageBox.Ok)
            msg.exec_()
            #taking value entered by user in text variable and bool if user press cancel
            text, ok = QtWidgets.QInputDialog.getText(self, 'Team Name', 'Enter text:')
            if not ok:
                break


        else:
            print("text12")
            if ok:
                for i in range(len(records)):
                    if text == records[i]:
                        msg = QtWidgets.QMessageBox()
                        msg.setIcon(QtWidgets.QMessageBox.Critical)
                        msg.setText(" Team name already exists")
                        msg.setWindowTitle("Error!")
                        msg.setStandardButtons(QtWidgets.QMessageBox.Ok)
                        msg.exec_()
                        text, ok = QtWidgets.QInputDialog.getText(self, 'Team Name', 'Enter text:')
                self.teamName.setText(str(text))
                self.batScore.setText("00")
                self.bowlScore.setText("00")
                self.wkScore.setText("00")
                self.arScore.setText("00")
                self.pointsUsed.setText("0000")
                self.pointsAvail.setText("1000")
                self.listplayers.clear()
                self.listPlayerschosen.clear()
                self.state = 'ON'

    def removelist1(self, item):
        mode = 'list1'
        pname = item.text()
        batSel = int(self.batScore.text())
        bowlSel = int(self.bowlScore.text())
        wkSel = int(self.wkScore.text())
        arSel = int(self.arScore.text())
        total = batSel + bowlSel + wkSel + arSel
        cursorfc.execute("SELECT ctg FROM stats WHERE player='" + pname + "';")
        tup = cursorfc.fetchone()
        ctg = (''.join(map(str, tup)))
        cursorfc.execute("SELECT value FROM stats WHERE player='" + pname + "';")
        tup = cursorfc.fetchone()
        value = int(''.join(map(str, tup)))
        totalused = int(self.pointsUsed.text()) + value
        if totalused <= 1000:  # if  user tries adds more than 11 players or the value of the player
            if (total < 11):  # increases the total value . player wont be added
                if ctg == 'BAT':
                    if batSel < 5:
                        batSel += 1

                        self.funcpoints(mode, value)
                        self.batScore.setText(str(batSel))
                        self.listplayers.takeItem(self.listplayers.row(item))
                        self.listPlayerschosen.addItem(item.text())

                    else:
                        msg = QtWidgets.QMessageBox()
                        msg.setIcon(QtWidgets.QMessageBox.Critical)
                        msg.setText(" You cant have more than 5 batsmen")
                        msg.setWindowTitle("Error!")
                        msg.setStandardButtons(QtWidgets.QMessageBox.Ok)
                        msg.exec_()
                elif ctg == 'BWL':
                    if bowlSel < 5:
                        bowlSel += 1
                        cursorfc.execute("SELECT value FROM stats WHERE player='" + pname + "';")
                        tup = cursorfc.fetchone()
                        value = int(''.join(map(str, tup)))
                        self.funcpoints(mode, value)
                        self.bowlScore.setText(str(bowlSel))
                        self.listplayers.takeItem(self.listplayers.row(item))
                        self.listPlayerschosen.addItem(item.text())

                    else:
                        msg = QtWidgets.QMessageBox()
                        msg.setIcon(QtWidgets.QMessageBox.Critical)
                        msg.setText(" You cant have more than 5 bowlers")
                        msg.setWindowTitle("Error!")
                        msg.setStandardButtons(QtWidgets.QMessageBox.Ok)
                        msg.exec_()
                elif ctg == 'WK':
                    if wkSel < 1:
                        wkSel += 1
                        cursorfc.execute("SELECT value FROM stats WHERE player='" + pname + "';")
                        tup = cursorfc.fetchone()
                        value = int(''.join(map(str, tup)))
                        self.funcpoints(mode, value)
                        self.wkScore.setText(str(wkSel))
                        self.listplayers.takeItem(self.listplayers.row(item))
                        self.listPlayerschosen.addItem(item.text())

                    else:
                        msg = QtWidgets.QMessageBox()
                        msg.setIcon(QtWidgets.QMessageBox.Critical)
                        msg.setText(" You cant have more than 1 WicketKeeper")
                        msg.setWindowTitle("Error!")
                        msg.setStandardButtons(QtWidgets.QMessageBox.Ok)
                        msg.exec_()
                elif ctg == 'AR':
                    if arSel <= 4:
                        arSel += 1
                        cursorfc.execute("SELECT value FROM stats WHERE player='" + pname + "';")
                        tup = cursorfc.fetchone()
                        value = int(''.join(map(str, tup)))
                        self.funcpoints(mode, value)
                        self.arScore.setText(str(arSel))
                        self.listplayers.takeItem(self.listplayers.row(item))
                        self.listPlayerschosen.addItem(item.text())

                else:
                    msg = QtWidgets.QMessageBox()
                    msg.setIcon(QtWidgets.QMessageBox.Critical)
                    msg.setText(" You cant have more than 4 All-Rounders")
                    msg.setWindowTitle("Error!")
                    msg.setStandardButtons(QtWidgets.QMessageBox.Ok)
                    msg.exec_()
            else:
                msg = QtWidgets.QMessageBox()
                msg.setIcon(QtWidgets.QMessageBox.Critical)
                msg.setText(" You cant have more than 11 players in a cricket team")
                msg.setWindowTitle("Error!")
                msg.setStandardButtons(QtWidgets.QMessageBox.Ok)
                msg.exec_()
        else:
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Critical)

            msg.setText(
                "Player You are trying to add is more than the points left" +
                "\n"
                "\n Points available:" + self.pointsAvail.text() +
                "\n"
                "\n Points required to add {} = {}".format(pname, value) +
                "\n"
                "\n Total players added:" + str(total)
            )

            msg.setWindowTitle("Error!Player is too expensive")
            msg.setStandardButtons(QtWidgets.QMessageBox.Ok)
            msg.exec_()

    def removelist2(self, item):
        mode = 'list2'
        pname = item.text()
        cursorfc.execute("SELECT value FROM stats WHERE player='" + pname + "';")
        tup = cursorfc.fetchone()
        value = int(''.join(map(str, tup)))
        self.funcpoints(mode, value)
        cursorfc.execute("SELECT ctg FROM stats WHERE player='" + pname + "';")
        tup = cursorfc.fetchone()
        ctg = (''.join(map(str, tup)))
        if ctg == 'BAT':
            batSel = int(self.batScore.text())
            batSel -= 1
            self.batScore.setText(str(batSel))
            self.listPlayerschosen.takeItem(self.listPlayerschosen.row(item))
            self.listplayers.addItem(item.text())
        if ctg == 'BWL':
            bowlSel = int(self.bowlScore.text())
            bowlSel -= 1
            self.batScore.setText(str(bowlSel))
            self.listPlayerschosen.takeItem(self.listPlayerschosen.row(item))
            self.listplayers.addItem(item.text())
        if ctg == 'WK':
            wkSel = int(self.wkScore.text())
            wkSel -= 1
            self.batScore.setText(str(wkSel))
            self.listPlayerschosen.takeItem(self.listPlayerschosen.row(item))
            self.listplayers.addItem(item.text())
        if ctg == 'AR':
            arSel = int(self.arScore.text())
            arSel -= 1
            self.batScore.setText(str(arSel))
            self.listPlayerschosen.takeItem(self.listPlayerschosen.row(item))
            self.listplayers.addItem(item.text())

    def funcpoints(self, mode, points=0):
        if mode == 'list1':
            currentAvailpoints = int(self.pointsAvail.text())
            currentAvailpoints -= points
            self.pointsAvail.setText(str(currentAvailpoints))
            currentUsedpoints = int(self.pointsUsed.text())
            currentUsedpoints += points
            self.pointsUsed.setText(str(currentUsedpoints))
        elif mode == 'list2':
            currentAvailpoints = int(self.pointsAvail.text())
            currentAvailpoints += points
            self.pointsAvail.setText(str(currentAvailpoints))
            currentUsedpoints = int(self.pointsUsed.text())
            currentUsedpoints -= points
            self.pointsUsed.setText(str(currentUsedpoints))


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
